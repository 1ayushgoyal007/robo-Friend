{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","console","log","length","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCFSC,EAZH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,MAAQC,EAAM,EAANA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA4BH,EAA5B,cACpB,6BACI,4BAAKF,GACL,2BAAIC,MCWLK,EAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAQ,kBAAC,EAAD,CACCC,IAAKL,EAAOI,GAAGT,GACfA,GAAMK,EAAOI,GAAGT,GAChBF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAG7B,OACI,6BACKO,ICNEK,EARG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKZ,UAAU,QACf,2BAAOA,UAAU,iCAAiCa,KAAO,OAAOC,YAAa,gBAAgBC,SAAUH,MCKhGI,G,MARF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC1DJ,EAAMK,YC8CJC,E,kDA5CX,aAAc,IAAD,8BACT,gBAOJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAPxC,EAAKC,MAAQ,CACTzB,OAAO,GACPO,YAAY,IAJP,E,gEAYO,IAAD,OACjBmB,MAAM,iFACHC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GAAS,EAAKR,SAAS,CAACtB,OAAO8B,S,+BAI/B,IAAD,EAC2BC,KAAKN,MAA7BzB,EADH,EACGA,OAAQO,EADX,EACWA,YACVyB,EAAiBhC,EAAOiC,QAAO,SAAAC,GACnC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS7B,EAAY4B,kBAIvD,OADAE,QAAQC,IAAIN,GACoB,IAA7BD,KAAKN,MAAMzB,OAAOuC,OACZ,yCAGL,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC5B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAWgC,U,GArCrBQ,IAAMC,W,MCGxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,a","file":"static/js/main.edf14dfb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nconst Card =({name , email , id})=>{\r\n    return (\r\n        <div className=\"tc bg-light-green dib br2 pa2 ma2 grow bw2 shadow-4\" >\r\n            <img alt=\"photo\" src = {`https://robohash.org/${id}?250*250`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","\r\n\r\nimport React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n    var cardComponent = robots.map((user,i)=>{\r\n       return (<Card \r\n                key={robots[i].id} \r\n                id = {robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} \r\n            />);\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return (\r\n        <div className=\" pa2\" >\r\n        <input className=\"pa3 ba b--blue bg-lighest-blue\" type = \"text\" placeholder =\"Search Robots\" onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nvar Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:'scroll',border:'3px solid black',height:'478px'}} >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from './SearchBox';\r\nimport \"./App.css\";\r\nimport Scroll from \"./Scroll\";\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots:[],\r\n            searchfield:''\r\n        };\r\n    }\r\n\r\n    onSearchChange =(event) =>{\r\n        this.setState({searchfield:event.target.value});      \r\n    }\r\n\r\n    componentDidMount(){\r\n      fetch('https://cors-anywhere.herokuapp.com/'+'http://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n         return response.json();\r\n        })\r\n        .then(users =>{this.setState({robots:users});\r\n        })\r\n    }\r\n   \r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n          return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        \r\n        console.log(filteredRobots);\r\n        if(this.state.robots.length === 0){\r\n          return <h1>Loading!!</h1>\r\n        }else{\r\n        return (\r\n            <div className='tc'>\r\n              <h1 className='f1' >RoboFriends</h1>\r\n              <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                  <CardList robots =  {filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// import CardList from './CardList';\n// import {robots} from './robots';\nimport App from './App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}